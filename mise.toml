[settings]
experimental = true
verbose = false

[env]
DOTNET_CLI_TELEMETRY_OPTOUT = "1"
DOTNET_NOLOGO = "1"
DOTNET_SKIP_FIRST_TIME_EXPERIENCE = "1"
DOTNET_ReadyToRun = "1"
DOTNET_TC_QuickJitForLoops = "1"
ASPNETCORE_ENVIRONMENT = "Development"
DOTNET_WATCH_RESTART_ON_RUDE_EDIT = "1"
DOTNET_USE_POLLING_FILE_WATCHER = "0"  # Reduces file watcher overhead
MSBuildNodeReuseTimeout = "900"
DOTNET_CLI_UI_LANGUAGE = "en"  # Skip locale detection
MSBuildEnableWorkloadResolver = "false"  # Skip workload resolution if not needed
DOTNET_MaxDegreeOfParallelism = "24"
XUNIT_MAXPARALLEL = "24"
 
[tasks."prepare-solution"]
description = "Finds the solution file and exports it to SOLUTION_FILE env var"
hide = true
env = { SOLUTION_FILE = "$(mise run find-solution)" }

[tasks."dotnet:restore"]
depends = ["prepare-solution"]
description = "Restore NuGet packages with optimizations"
quiet = true
dir = "{{ cwd }}"
run = '''
set -e

dotnet restore "${SOLUTION_FILE}" \
    --use-lock-file \
    --locked-mode \
    -maxcpucount:12 \
    --nologo
'''

[tasks."dotnet:build"]
depends = ["prepare-solution"]
description = "Builds the .NET solution. Warnings are NOT treated as errors."
quiet = true
dir = "{{ cwd }}"
run = '''
set -e

dotnet build "${SOLUTION_FILE}" \
    /property:Configuration=Debug \
    /property:GenerateFullPaths=true \
    /consoleloggerparameters:NoSummary \
    /property:GenerateDocumentation=false \
    /property:IsLocalBuild=true \
    -maxcpucount:12 \
    -nodeReuse:true \
    /property:UseSharedCompilation=true \
    /property:BuildInParallel=true
'''

[tasks."dotnet:build:fast"]
depends = ["prepare-solution"]
description = "Builds the .NET solution quickly just for development."
quiet = true
dir = "{{ cwd }}"
run = '''
set -e

dotnet build "${SOLUTION_FILE}" \
    /property:Configuration=Debug \
    /property:IsLocalBuild=true \
    --nologo \
    --no-restore \
    -maxcpucount:12 \
    -nodeReuse:true \
    /property:UseSharedCompilation=true \
    /property:BuildInParallel=true
'''

[tasks."dotnet:build:strict"]
depends = ["prepare-solution"]
description = "Builds the .NET solution from the scratch. Warnings are treated as errors."
quiet = true
dir = "{{ cwd }}"
run = '''
set -e

dotnet build "${SOLUTION_FILE}" \
    /property:Configuration=Debug \
    /property:GenerateFullPaths=true \
    /consoleloggerparameters:NoSummary \
    /property:GenerateDocumentation=false \
    /property:IsLocalBuild=true \
    /property:TreatWarningsAsErrors=true \
    /warnaserror \
    --no-incremental
'''

[tasks."dotnet:coverage"]
depends = ["dotnet:build"]
description = "Runs tests and collects code coverage"
quiet = true
dir = "{{ cwd }}"
run = '''
set -e

rm -rf **/CoverageResults/

EXCLUDE_PARAM=""
if [ -n "${COVERAGE_EXCLUDE:-}" ]; then
    EXCLUDE_PARAM="/property:Exclude=\"${COVERAGE_EXCLUDE}\""
fi

dotnet test --no-build "${SOLUTION_FILE}" \
    /property:GenerateFullPaths=true \
    /consoleloggerparameters:NoSummary \
    /property:CollectCoverage=true \
    /property:CoverletOutput=../CoverageResults/ \
    /property:MergeWith=../CoverageResults/coverage.json \
    /property:CoverletOutputFormat=\"lcov,json\" \
    ${EXCLUDE_PARAM} \
    -- RunConfiguration.MaxCpuCount=12
'''

[tasks."dotnet:coverage2"]
depends = ["dotnet:build"]
description = "Runs tests with Coverlet and generates HTML/Text reports with ReportGenerator"
quiet = true
dir = "{{ cwd }}"
run = '''
set -e

# ====================================================================
# PREREQUISITES:
# This task requires the ReportGenerator global tool to be installed.
#
# To install it, run:
#   dotnet tool install -g dotnet-reportgenerator-globaltool
#
# To update to the latest version, run:
#   dotnet tool update -g dotnet-reportgenerator-globaltool
#
# To verify it's installed, run:
#   reportgenerator --version
# ====================================================================

# Clean up old coverage results
rm -rf CoverageResults/
rm -rf tests/*/TestResults/

# Set up exclude parameter if defined
EXCLUDE_PARAM=""
if [ -n "${COVERAGE_EXCLUDE:-}" ]; then
    EXCLUDE_PARAM="/p:Exclude=\"${COVERAGE_EXCLUDE}\""
fi

# Find all test projects
TEST_PROJECTS=$(find tests -name "*.csproj" -type f | grep -v "TestHelpers" | sort)

echo "üîç Running tests and collecting coverage with Coverlet..."
echo ""

# Run tests for each project and collect coverage
for PROJECT in $TEST_PROJECTS; do
    PROJECT_NAME=$(basename -s .csproj "$PROJECT")
    echo "üìä Testing $PROJECT_NAME..."

    dotnet test "$PROJECT" \
        --no-build \
        --logger "console;verbosity=minimal" \
        /p:CollectCoverage=true \
        /p:CoverletOutput="../../CoverageResults/${PROJECT_NAME}.cobertura.xml" \
        /p:CoverletOutputFormat="cobertura" \
        /p:CoverletConsoleOutput=false \
        /p:SkipAutoProps=true \
        ${EXCLUDE_PARAM} \
        -- RunConfiguration.MaxCpuCount=12
done

echo ""
echo "üìà Generating coverage reports..."

# Find all source directories (excluding test directories)
SOURCE_DIRS=$(find . -name "*.csproj" -not -path "./tests/*" -not -path "./CoverageResults/*" -exec dirname {} \; | sort -u | tr '\n' ';')

# Generate HTML and Text reports using ReportGenerator
reportgenerator \
    -reports:"CoverageResults/*.cobertura.xml" \
    -targetdir:"CoverageResults/html" \
    -sourcedirs:"${SOURCE_DIRS}" \
    -reporttypes:"Html;TextSummary" \
    -verbosity:"Error" \
    -assemblyfilters:"-xunit*;-*.Tests;-*.IntegrationTests" \
    -classfilters:"-*.Migrations.*"

# Display the text summary in terminal
echo ""
echo "üìä Coverage Summary:"
echo "===================="
cat CoverageResults/html/Summary.txt

# Get absolute path and print clickable URL
REPORT_PATH=$(realpath CoverageResults/html/index.html)
echo ""
echo "‚úÖ Coverage report generated successfully!"
echo ""
echo "üìÇ HTML Report: file://${REPORT_PATH}"
echo ""
echo "üí° Click the link above or run: xdg-open \"file://${REPORT_PATH}\""
'''

[tasks."dotnet:test"]
depends = ["dotnet:build:fast"]
description = "Runs the .NET unit tests (excludes integration tests)"
quiet = true
dir = "{{ cwd }}"
run = '''
set -e

dotnet test --no-build "${SOLUTION_FILE}" \
    --filter "FullyQualifiedName!~Integration" \
    --blame-hang-timeout 60s \
    -- RunConfiguration.MaxCpuCount=24 \
       RunConfiguration.DisableAppDomain=true \
       xUnit.MaxParallelThreads=24 \
       NUnit.NumberOfTestWorkers=24
'''

[tasks."dotnet:test:full"]
depends = ["dotnet:build"]
description = "Runs all .NET tests including integration tests"
quiet = true
dir = "{{ cwd }}"
run = '''
set -e

dotnet test --no-build "${SOLUTION_FILE}"
'''
